<?xml version="1.0" ?>
<?xml-stylesheet type='text/xsl'
href='http://xml.resource.org/authoring/rfc2629.xslt' ?>

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'[] >

<?rfc compact="yes" ?>
<?rfc iprnotified="yes" ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<rfc category="info" ipr="trust200902" docName="draft-ietf-emu-eaptlscert-latest">

<front>
	<title abbrev="Certificates in TLS-based EAP Methods">Handling Large Certificates and Long Certificate Chains in&nbsp;TLS&#8209;based&nbsp;EAP&nbsp;Methods</title>
	
		<author initials="M" surname="Sethi" fullname="Mohit Sethi">
			<organization>Ericsson</organization>
			<address>
				<postal>
					<street></street>
					<city>Jorvas</city>
					<code>02420</code>
					<country>Finland</country>
				</postal>
				<email>mohit@piuha.net</email>
			</address>
		</author>
		<author initials="J" surname="Mattsson" fullname="John Mattsson">
			<organization>Ericsson</organization>
			<address>
				<postal>
					<street></street>
					<city>Kista</city>
					<code></code>
					<country>Sweden</country>
				</postal>
				<email>john.mattsson@ericsson.com</email>
			</address>
		</author>
		<author initials="S" surname="Turner" fullname="Sean Turner">
			<organization>sn3rd</organization>
			<address>
				<postal>
					<street></street>
					<city></city>
					<code></code>
					<country></country>
				</postal>
				<email>sean@sn3rd.com</email>
			</address>
		</author>
	<date />

	<workgroup>Network Working Group </workgroup>

	<abstract>
		<t>
		The Extensible Authentication Protocol (EAP), defined in RFC3748, provides a standard mechanism for support of multiple authentication methods. EAP-Transport Layer Security (EAP-TLS) and other TLS-based EAP methods are widely deployed and used for network access authentication. Large certificates and long certificate chains combined with authenticators that drop an EAP session after only 40 - 50 round-trips is a major deployment problem. This document looks at the this problem in detail and describes the potential solutions available.
		</t>
	</abstract>
</front>

<middle>
	<section title="Introduction">
		<t>
			The Extensible Authentication Protocol (EAP), defined in <xref target="RFC3748"/>, provides a standard mechanism for support of multiple authentication methods. EAP-Transport Layer Security (EAP-TLS) <xref target="RFC5216"/> <xref target="I-D.ietf-emu-eap-tls13"/> relies on TLS <xref target="RFC8446"/> to provide strong mutual authentication with certificates <xref target="RFC5280"/> and is widely deployed and often used for network access authentication. There are also many other TLS-based EAP methods, such as Flexible Authentication via Secure Tunneling (EAP-FAST) <xref target="RFC4851"/>, Tunneled Transport Layer Security (EAP-TTLS) <xref target="RFC5281"/>, Tunnel Extensible Authentication Protocol (EAP-TEAP) <xref target="RFC7170"/>, and possibly many vendor specific EAP methods.
		</t>

		<t>
			Certificates in EAP deployments can be relatively large, and the certificate chains can be long. Unlike the use of TLS on the web, where typically only the TLS server is authenticated; EAP-TLS deployments typically authenticates both the EAP peer and the EAP server. Also, from deployment experience, EAP peers typically have longer certificate chains than servers. This is because EAP peers often follow organizational hierarchies and tend to have many intermediate certificates. Thus, EAP-TLS authentication usually involves exchange of significantly more octets than when TLS is used as part of HTTPS.
		</t>

		<t>
			Section 3.1 of <xref target="RFC3748"/> states that EAP implementations can assume a MTU of at least 1020 octets from lower layers. The EAP fragment size in typical deployments is just 1020 - 1500 octets (since the maximum Ethernet frame size is ~ 1500 bytes). Thus, EAP-TLS authentication needs to be fragmented into many smaller packets for transportation over the lower layers. Such fragmentation can not only negatively affect the latency, but also results in other challenges. For example, some EAP authenticator (access point) implementations will drop an EAP session if it has not finished after 40 - 50 round-trips. This is a major problem and means that in many situations, the EAP peer cannot perform network access authentication even though both the sides have valid credentials for successful authentication and key derivation.
		</t>
		<t>
			Not all EAP deployments are constrained by the MTU of the lower layer. For example, some implementations support EAP over Ethernet "Jumbo" frames that can easily allow very large EAP packets. Larger packets will naturally help lower the number of round trips required for successful EAP-TLS authentication. However, deployment experience has shown that these jumbo frames are not always implemented correctly. Additionally, EAP fragment size is also restricted by protocols such as RADIUS <xref target="RFC2865"/> which are responsible for transporting EAP messages between an authenticator and an EAP server. RADIUS can generally transport only about 4000 octets of EAP in a single message (the maximum length of RADIUS packet is restricted to 4096 octets in <xref target="RFC2865"/>).
		</t>
		<t>
			This document looks at related work and potential tools available for overcoming the deployment challenges induced by large certificates and long certificate chains. It then discusses the solutions available to overcome these challenges.
		</t>
	</section>

	<section title="Terminology">
		<t>
			The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.
		</t>

		<t>
			Readers are expected to be familiar with the terms and concepts used in EAP <xref target="RFC3748"/>, EAP-TLS <xref target="RFC5216"/>, and TLS <xref target="RFC8446"/>. In particular, this document frequently uses the following terms as they have been defined in <xref target="RFC5216"/>:
				<list style="hanging" hangIndent="6">
					<t hangText="Authenticator">
					The entity initiating EAP authentication. Typically implemented as part of a network switch or a wireless access point.
					</t>

					<t hangText="EAP peer">
					The entity that responds to the authenticator. In <xref target="IEEE-802.1X"/>, this entity is known as the supplicant. In EAP-TLS, the EAP peer implements the TLS client role.
					</t>

					<t hangText="EAP server">
					The entity that terminates the EAP authentication method with the peer. In the case where no backend authentication server is used, the EAP server is part of the authenticator. In the case where the authenticator operates in pass-through mode, the EAP server is located on the backend authentication server. In EAP-TLS, the EAP server implements the TLS server role.
					</t>
				</list>
			The document additionally uses the terms trust anchor and certification path defined in <xref target="RFC5280"/>.
		</t>
	</section>

	<section title="Experience with Deployments">
		<t>
		As stated earlier, the EAP fragment size in typical deployments is just 1020 - 1500 octets. Certificate sizes can however be large for a number of reasons:
			<list style="symbols">
				<t>Long Subject Alternative Name field.</t>

				<t>Long Public Key and Signature fields.</t>

				<t>Can contain multiple object identifiers (OID) that indicate the permitted uses of the certificate as noted in Section 5.3 of <xref target="RFC5216"/>. Most implementations verify the presence of these OIDs for successful authentication.</t>

				<t>Multiple user groups in the certificate.</t>
			</list>
		</t>

		<t>
			A certificate chain (called a certification path in <xref target="RFC5280"/>) can commonly have 2 - 6 intermediate certificates between the end-entity certificate and the trust anchor.
		</t>

		<t>
			Many access point implementations drop EAP sessions that do not complete within 50 round-trips. This means that if the chain is larger than ~ 60 kbytes, EAP-TLS authentication cannot complete successfully in most deployments.
		</t>
	</section>

	<section title="Handling of Large Certificates and Long Certificate Chains" anchor="handle-large-cert-long-chain">
		<t>
		This section discusses some possible alternatives for overcoming the challenge of large certificates and long certificate chains in EAP-TLS authentication. Section <xref target="update-certs"/> considers recommendations that require an update of the certificates or certificate chains used for EAP-TLS authentication without requiring changes to the existing EAP-TLS code base. The section also provides some guidelines that should be followed when issuing certificates for use with EAP-TLS. <xref target="update-code"/> considers recommendations that rely on updates to the EAP-TLS implementations and can be deployed with existing certificates. Finally, <xref target="update-APs"/> briefly discusses what could be done to update or reconfigure authenticators when it is infeasible to replace deployed components giving a solution which can be deployed without changes to existing certificates or code.
		</t>
		
		<section title="Updating Certificates and Certificate Chains" anchor="update-certs">
			<t>
				Many IETF protocols now use elliptic curve cryptography (ECC) <xref target="RFC6090"/> for the underlying cryptographic operations. The use of ECC can reduce the size of certificates and signatures. For example, at a 128-bit security level, the size of public keys with traditional RSA is about 384 bytes, while the size of public keys with ECC is only 32-64 bytes. Similarly, the size of digital signatures with traditional RSA is 384 bytes, while the size is only 64 bytes with elliptic curve digital signature algorithm (ECDSA) and Edwards-curve digital signature algorithm (EdDSA) <xref target="RFC8032"/>. Using certificates that use ECC can reduce the number of messages in EAP-TLS authentication which can alleviate the problem of authenticators dropping an EAP session because of too many round-trips. In the absence of a standard application profile specifying otherwise, TLS 1.3 <xref target="RFC8446"/> requires implementations to support ECC. New cipher suites that use ECC are also specified for TLS 1.2 <xref target="RFC5289"/>. Using ECC based cipher suites with existing code can significantly reduce the number of messages in a single EAP session.
			</t>

			<section title="Guidelines for Certificates" anchor="cert-guide">
				<t>The general guideline of keeping the certificate size small by not populating fields with excessive information can help avert the problems of failed EAP-TLS authentication. More specific recommendations for certificates used with EAP-TLS are as follows:
					<list style="symbols">
						<t>
						Object Identifiers (OIDs) is an ASN.1 data type that defines unique identifiers for objects. The OID's ASN.1 value, which is a string of integers, is then used to name objects to which they relate. The Distinguished Encoding Rules (DER) length for the first two integers is always one octet and subsequent integers are base 128-encoded in the fewest possible octets. OIDs are used lavishly in X.509 certificates <xref target="RFC5280"/> and while not all can be avoided, e.g., OIDs for extensions or algorithms and their associate parameters, some are well within the certificate issuer’s control:
							<list style="symbols">
								<t>
								Each naming attribute in a DN (Directory Name) has one. DNs used in the issuer and subject fields as well as numerous extensions. A shallower naming will be smaller, e.g., C=FI, O=Example, SN=B0A123499EFC as against C=FI, O=Example, OU=Division 1, SOPN=Southern Finland, CN=Coolest IoT Gadget Ever, SN=B0A123499EFC.
								</t>
								<t>
								Every certificate policy (and qualifier) and any mappings to another policy uses identifiers. Consider carefully what policies apply.
								</t>
							</list>
						</t>
						<t>
						DirectoryString and GeneralName types are used extensively to name things, e.g., the DN naming attribute O= (the organizational naming attribute) DirectoryString includes “Example” for the Example organization and uniformResourceIdentifier can be used to indicate the location of the CRL, e.g., “http://crl.example.com/sfig2s1-128.crl", in the CRL Distribution Point extension. For these particular examples, each character is a byte. For some non-ASCII character strings in the DN, characters can be multi-byte. Obviously, the names need to be unique, but there is more than one way to accomplish this without long strings. This is especially true if the names are not meant to be meaningful to users.
						</t>
						<t>
						Extensions are necessary to comply with <xref target="RFC5280"/>, but the vast majority are optional. Include only those that are necessary to operate.
						</t>
						<t>As stated earlier, certificate chains of the EAP peer often follow organizational hierarchies. In such cases, information in intermediate certificates (such as postal addresses) do not provide any additional value and they can be shortened (for example: only including the department name instead of the full postal address).</t>
					</list>
				</t>
			</section>
			<section title="Pre-distributing and Omitting CA certificates">
				<t>
					The TLS Certificate message conveys the sending endpoint's certificate chain. TLS allows endpoints to reduce the size of the Certificate message by omitting certificates that the other endpoint is known to possess. When using TLS 1.3, all certificates that specify a trust anchor known by the other endpoint may be omitted (see Section 4.4.2 of <xref target="RFC8446"/>). When using TLS 1.2 or earlier, only the self-signed certificate that specifies the root certificate authority may be omitted (see Section 7.4.2 of <xref target="RFC5246"/> Therefore, updating TLS implementations to version 1.3 can help to significantly reduce the number of messages exchanged for EAP-TLS authentication. The omitted certificates need to be pre-distributed independently of TLS and the TLS implementations need to be configured to omit these pre-distributed certificates.
				</t>
			</section>
			<section title="Using Fewer Intermediate Certificates">
				<t>
					The EAP peer certificate chain does not have to mirror the organizational hierarchy. For successful EAP-TLS authentication, certificate chains SHOULD NOT contain more than 2-4 intermediate certificates.
				</t>
				<t>
					Administrators responsible for deployments using TLS-based EAP methods can examine the certificate chains and make rough calculations about the number of round trips required for successful authentication. For example, dividing the total size of all the certificates in the peer and server certificate chain (in bytes) by 1020 bytes will indicate the minimum number of round trips required. If this number exceeds 50, then, administrators can expect failures with many common authenticator implementations.
				</t>
			</section>			
		</section>

		<section title="Updating TLS and EAP-TLS Code" anchor="update-code">
			<t>This section discusses how the fragmentation problem can be avoided by updating the underlying TLS or EAP-TLS implementation. Note that in many cases the new feature may already be implemented in the underlying library and simply needs to be taken into use.</t>
			<section title="URLs for Client Certificates">
				<t>
					<xref target="RFC6066"/> defines the "client_certificate_url" extension which allows TLS clients to send a sequence of Uniform Resource Locators (URLs) instead of the client certificate. URLs can refer to a single certificate or a certificate chain. Using this extension can curtail the amount of fragmentation in EAP deployments thereby allowing EAP sessions to successfully complete.
				</t>
			</section>
			<section title="Caching Certificates">
				<t>
					The TLS Cached Information Extension <xref target="RFC7924"/> specifies an extension where a server can exclude transmission of certificate information cached in an earlier TLS handshake. The client and the server would first execute the full TLS handshake. The client would then cache the certificate provided by the server. When the TLS client later connects to the same TLS server without using session resumption, it can attach the "cached_info" extension to the ClientHello message. This would allow the client to indicate that it has cached the certificate. The client would also include a fingerprint of the server certificate chain. If the server's certificate has not changed, then the server does not need to send its certificate and the corresponding certificate chain again. In case information has changed, which can be seen from the fingerprint provided by the client, the certificate payload is transmitted to the client to allow the client to update the cache. The extension however necessitates a successful full handshake before any caching. This extension can be useful when, for example, a successful authentication between an EAP peer and EAP server has occurred in the home network. If authenticators in a roaming network are stricter at dropping long EAP sessions, an EAP peer can use the Cached Information Extension to reduce the total number of messages.
				</t>
				<t>
					However, if all authenticators drop the EAP session for a given EAP peer and EAP server combination, a successful full handshake is not possible. An option in such a scenario would be to cache validated certificate chains even if the EAP-TLS exchange fails, but this is currently not allowed according to <xref target="RFC7924"/>.
				</t>
			</section>
			<section title="Compressing Certificates">
				<t>
					The TLS working group is also working on an extension for TLS 1.3 <xref target="I-D.ietf-tls-certificate-compression"/> that allows compression of certificates and certificate chains during full handshakes. The client can indicate support for compressed server certificates by including this extension in the ClientHello message. Similarly, the server can indicate support for compression of client certificates by including this extension in the CertificateRequest message. While such an extension can alleviate the problem of excessive fragmentation in EAP-TLS, it can only be used with TLS version 1.3 and higher. Deployments that rely on older versions of TLS cannot benefit from this extension.
				</t>
			</section>
			<section title="Compact TLS 1.3">
				<t>
					<xref target="I-D.ietf-tls-ctls"/> defines a "compact" version of TLS 1.3 and reduces the message size of the protocol by removing obsolete material and using more efficient encoding. It also defines a compression profile with which either side can define a dictionary of "known certificates". Thus, cTLS can provide another mechanism for EAP-TLS deployments to reduce the size of messages and avoid excessive fragmentation.
				</t>
			</section>
			<section title="Suppressing Intermediate Certificates">
				<t>
					For a client that has all intermediate certificates in the certificate chain, having the server send intermediates in the TLS handshake increases the size of the handshake unnecessarily. The TLS working group is working on an extension for TLS 1.3 <xref target="I-D.thomson-tls-sic"/> that allows a TLS client that has access to the complete set of published intermediate certificates to inform servers of this fact so that the server can avoid sending intermediates, reducing the size of the TLS handshake. The mechanism is intended to be complementary with certificate compression.
				</t>
			</section>
			<section title="Raw Public Keys">
				<t>
					<xref target="RFC7250"/> defines a new certificate type and TLS extensions to enable the use of raw public keys for authentication. Raw public keys use only a subset of information found in typical certificates and are therefore much smaller in size. However, raw public keys require an out-of-band mechanism to bind the public key with the entity presenting the key. Using raw public keys will obviously avoid the fragmentation problems resulting from large certificates and long certificate chains. Deployments can consider their use as long as an appropriate out-of-band mechanism for binding public keys with identifiers is in place.
				</t>
			</section>			
			<section title="New Certificate Types and Compression Algorithms" anchor="new-cert-format">
				<t>
					There is ongoing work to specify new certificate types and compression algorithms. For example, <xref target="I-D.mattsson-tls-cbor-cert-compress"/> defines a compression algorithm for certificates that relies on Concise Binary Object Representation (CBOR) <xref target="RFC7049"/>. <xref target="I-D.tschofenig-tls-cwt"/> registers a new TLS Certificate type which would enable TLS implementations to use CBOR Web Tokens (CWTs) <xref target="RFC8392"/> as certificates. While these are early initiatives, future EAP-TLS deployments can consider the use of these new certificate types and compression algorithms to avoid large message sizes.
				</t>
			</section>
		</section>

		<section title="Updating Authenticators" anchor="update-APs">
			<t>
				There are several legitimate reasons that authenticators may want to limit the number of round-trips/packets/octets that can be sent. The main reason has been to work around issues where the EAP peer and EAP server end up in an infinite loop ACKing their messages. Another reason is that unlimited communication from an unauthenticated device using EAP could provide a channel for inappropriate bulk data transfer. A third reason is to prevent denial-of-service attacks.
			</t>
			<t>
				Updating the millions of already deployed access points and switches is in many cases not realistic. Vendors may be out of business or do no longer support the products and administrators may have lost the login information to the devices. For practical purposes the EAP infrastructure is ossified for the time being.
			</t>
			<t>
				Vendors making new authenticators should consider increasing the number of round-trips allowed to 100 before denying the EAP authentication to complete. Based on the size of the certificates and certificate chains currently deployed, such an increase would likely ensure that peers and servers can complete EAP-TLS authentication. At the same time, administrators responsible for EAP deployments should ensure that this 100 roundtrip limit is not exceeded in practice.
			</t>
		</section>
	</section>

	<section anchor="IANA" title="IANA Considerations">
		<t>This document includes no request to IANA.</t>
	</section>

	<section anchor="Security" title="Security Considerations">
		<t>
			Updating implementations to TLS version 1.3 allows omitting all certificates with a trust anchor known by the other endpoint. TLS 1.3 additionally provides improved security, privacy, and reduced latency for EAP-TLS <xref target="I-D.ietf-emu-eap-tls13"/>.
		</t>
		<t>
			Security considerations when compressing certificates are specified in <xref target="I-D.ietf-tls-certificate-compression"/>.
		</t>
		<t>
			As noted in <xref target="I-D.thomson-tls-sic"/>, suppressing intermediate certificates creates an unencrypted signal that might be used to identify which clients believe that they have all intermediates. This might also allow more effective fingerprinting and tracking of clients.
		</t>
	</section>
</middle>

<back>
	<references title="Normative References">
		<?rfc include='reference.RFC.2119'?> <!-- Terminology -->
		<?rfc include='reference.RFC.3748'?> <!-- EAP -->
		<?rfc include='reference.RFC.4851'?> <!-- FAST -->
		<?rfc include='reference.RFC.5216'?> <!-- EAP-TLS -->
		<?rfc include='reference.RFC.5280'?> <!-- Certificates -->
		<?rfc include='reference.RFC.5281'?> <!-- TTLS -->
		<?rfc include='reference.RFC.7170'?> <!-- TEAP -->
		<?rfc include='reference.RFC.8174'?> <!-- Terminology -->
		<?rfc include='reference.I-D.ietf-emu-eap-tls13'?> <!-- EAP-TLS with TLS 1.3 -->
	</references>

	<references title="Informative References">
		<?rfc include='reference.RFC.2865'?> <!-- RADIUS -->
		<?rfc include='reference.RFC.5289'?> <!-- TLS 1.2 ciphersuites -->
		<?rfc include='reference.RFC.6090'?> <!-- ECC -->
		<?rfc include='reference.RFC.6066'?> <!-- TLS Extensions -->
		<?rfc include='reference.RFC.7924'?> <!-- TLS cached information extension -->
		<?rfc include='reference.RFC.8032'?> <!-- EdDSA -->
		<?rfc include='reference.RFC.5246'?> <!-- TLS 1.2 -->
		<?rfc include='reference.RFC.8446'?> <!-- TLS 1.3 -->
		<?rfc include='reference.RFC.8392'?> <!-- CBOR Web Token -->
		<?rfc include='reference.RFC.7049'?> <!-- CBOR -->
		<?rfc include='reference.RFC.7250'?> <!-- Raw Public Keys -->
		<?rfc include='reference.I-D.ietf-tls-certificate-compression'?> <!-- TLS 1.3 extension -->
		<?rfc include='reference.I-D.thomson-tls-sic'?> <!-- TLS 1.3 extension -->
		<?rfc include='reference.I-D.ietf-tls-ctls'?> <!-- Compact TLS 1.3  -->
		<?rfc include='reference.I-D.tschofenig-tls-cwt'?>
		<?rfc include='reference.I-D.mattsson-tls-cbor-cert-compress'?>
		
		<reference anchor="IEEE-802.1X">
			<front>
				<title>IEEE Standard for Local and metropolitan area networks -- Port-Based Network Access Control</title>
				<author>
					<organization>Institute of Electrical and Electronics Engineers</organization>
				</author>
				<date month="February" year="2010" />
			</front>
			<seriesInfo name="IEEE Standard 802.1X-2010" value="" />
		</reference>
	</references>

	<section title="Acknowledgements" numbered="false">
		<t>
		This draft is a result of several useful discussions with Alan DeKok, Bernard Aboba, Jari Arkko, Jouni Malinen, Darshak Thakore, and Hannes Tschofening.
		</t>
	</section>
</back>

</rfc>
